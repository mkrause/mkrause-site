#!/bin/bash
# Application management tool

# Bash configuration
shopt -s nullglob # Expand globs with zero matches to zero arguments instead of the glob pattern
shopt -s dotglob # Match dot files

cli_args=("$@") # Save the CLI arguments

# Get the absolute path for the current script
# Source: http://stackoverflow.com/questions/59895
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors
col_reset="\x1b[39;49;00m"
col_red="\x1b[31;01m"
col_green="\x1b[32;01m"
col_yellow="\x1b[33;01m"
col_blue="\x1b[34;01m"
col_magenta="\x1b[35;01m"
col_cyan="\x1b[36;01m"

show_help() {
    script_name="$(basename "${BASH_SOURCE[0]}")"
    echo "usage: $script_name [--help] [--version]"
}

show_version() {
    echo "version 0.1"
}

# Parse command line options (sets: $cmd, $args)
parse_options() {
    # http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
    for arg in ${cli_args[@]}; do
        case "$arg" in
            --) break ;; # Use "--" as a signal to stop options processing
            -h | --help)
                show_help
                exit 0
                ;;
            -v | --version)
                show_version
                exit 0
                ;;
            *)
                if [ -z "$cmd" ]; then
                    cmd=$arg
                else
                    args+=($arg)
                fi
                ;;
        esac
    done
}

# -----------------
# Commands
# -----------------

deploy() {
    host='77.74.53.173'
    username='root'
    path_local="${script_dir}/../.."
    path_remote='/var/www/mkrause.nl/public_html/test'
    
    # Paths to exclude from syncing
    # Note: all paths are relative to the source directory, and if you don't add a preceding "/"
    # it will match *all* paths with that name
    # http://askubuntu.com/questions/349613
    excludes="--exclude=.DS_Store --exclude /.git"
    includes=""
    
    restart_server=0
    
    # Options parsing
    for arg in "${cli_args[@]}"; do
        case "$arg" in
            --) break ;;
            --exclude=*)
                path=${arg#--exclude=} # Remove the prefixed option name
                excludes="$excludes --exclude $path" # Append the exclude to the list
                ;;
            --include=*)
                path=${arg#--include=} # Remove the prefixed option name
                includes="$includes --include $path" # Append the include to the list
                ;;
            --restart_server) restart_server=1 ;;
        esac
    done
    
    echo -e "${col_yellow}Synchronizing files...${col_reset}"
    
    # Sync files
    # -rvtpl recursive, verbose, preserve timestamps and permissions, sync symlinks
    rsync -rvtpl "${path_local}" "${username}@${host}:${path_remote}"\
        $excludes $includes --delete
    
    if [ "$restart_server" = 1 ]; then
        echo -e "${col_yellow}Restarting server...${col_reset}"
        ssh "${username}@${host}" "/etc/init.d/apache2 restart"
    fi
}


# Parse command line options
cmd=""
args=()
parse_options

# Run the specified command
case "$cmd" in
    deploy) deploy "${args[@]}" ;;
    ?*) # Fallback (non-empty string)
        echo "Unrecognized command \"$cmd\""
        exit 1
        ;;
    *) # Fallback (empty string)
        show_help
        ;;
esac
